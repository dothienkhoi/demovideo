"use client";

import { useState } from "react";
import { toast } from "sonner";
import { UserSearchCombobox } from "./UserSearchCombobox";
import { UserSearchResultDTO } from "@/types/admin/group.types";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Separator } from "@/components/ui/separator";

export function UserSearchDemo() {
  const [selectedUser, setSelectedUser] = useState<UserSearchResultDTO | null>(
    null
  );
  const [selectedGroupUser, setSelectedGroupUser] =
    useState<UserSearchResultDTO | null>(null);
  const [searchQuery, setSearchQuery] = useState(""); // Add search query state for basic search
  const [groupSearchQuery, setGroupSearchQuery] = useState(""); // Add search query state for group search

  const handleUserSelect = (user: UserSearchResultDTO | null) => {
    if (user) {
      setSelectedUser(user);
      setSearchQuery(user.displayName); // Update search query when user is selected
      toast.success("ƒê√£ ch·ªçn ng∆∞·ªùi d√πng", {
        description: `${user.displayName} (${user.email})`,
      });
    } else {
      setSearchQuery(""); // Clear search query when user is cleared
    }
  };

  const handleGroupUserSelect = (user: UserSearchResultDTO | null) => {
    if (user) {
      setSelectedGroupUser(user);
      setGroupSearchQuery(user.displayName); // Update search query when user is selected
      toast.success("ƒê√£ ch·ªçn ng∆∞·ªùi d√πng cho nh√≥m", {
        description: `${user.displayName} (${user.email})`,
      });
    } else {
      setGroupSearchQuery(""); // Clear search query when user is cleared
    }
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold">
          Enhanced User Search Component Demo
        </h1>
        <p className="text-muted-foreground mt-2">
          Demo component ƒë·ªÉ ki·ªÉm tra c√°c t√≠nh nƒÉng n√¢ng cao c·ªßa
          UserSearchCombobox
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Basic User Search */}
        <Card>
          <CardHeader>
            <CardTitle>T√¨m ki·∫øm ng∆∞·ªùi d√πng c∆° b·∫£n</CardTitle>
            <CardDescription>
              T√¨m ki·∫øm t·∫•t c·∫£ ng∆∞·ªùi d√πng trong h·ªá th·ªëng v·ªõi infinite scroll
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <UserSearchCombobox
              value={selectedUser} // Pass selectedUser as controlled value
              onSelectUser={handleUserSelect}
              searchQuery={searchQuery} // Pass searchQuery as controlled value
              onSearchQueryChange={setSearchQuery} // Pass setSearchQuery as callback
              placeholder="T√¨m ki·∫øm ng∆∞·ªùi d√πng..."
            />

            {selectedUser && (
              <div className="p-4 border rounded-lg bg-muted/50">
                <h4 className="font-medium mb-2">Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn:</h4>
                <div className="flex items-center gap-3">
                  <Avatar className="h-10 w-10">
                    <AvatarImage
                      src={selectedUser.avatarUrl}
                      alt={selectedUser.displayName}
                    />
                    <AvatarFallback>
                      {selectedUser.displayName.charAt(0).toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <p className="font-medium">{selectedUser.displayName}</p>
                    <p className="text-sm text-muted-foreground">
                      {selectedUser.email}
                    </p>
                    <Badge variant="outline" className="mt-1">
                      ID: {selectedUser.userId.slice(0, 8)}...
                    </Badge>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Group User Search */}
        <Card>
          <CardHeader>
            <CardTitle>T√¨m ki·∫øm ng∆∞·ªùi d√πng cho nh√≥m</CardTitle>
            <CardDescription>
              T√¨m ki·∫øm ng∆∞·ªùi d√πng ch∆∞a c√≥ trong nh√≥m c·ª• th·ªÉ v·ªõi excludeGroupId
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <UserSearchCombobox
              value={selectedGroupUser} // Pass selectedGroupUser as controlled value
              onSelectUser={handleGroupUserSelect}
              searchQuery={groupSearchQuery} // Pass groupSearchQuery as controlled value
              onSearchQueryChange={setGroupSearchQuery} // Pass setGroupSearchQuery as callback
              excludeGroupId="sample-group-id-123"
              placeholder="T√¨m ki·∫øm ng∆∞·ªùi d√πng cho nh√≥m..."
            />

            {selectedGroupUser && (
              <div className="p-4 border rounded-lg bg-muted/50">
                <h4 className="font-medium mb-2">
                  Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn cho nh√≥m:
                </h4>
                <div className="flex items-center gap-3">
                  <Avatar className="h-10 w-10">
                    <AvatarImage
                      src={selectedGroupUser.avatarUrl}
                      alt={selectedGroupUser.displayName}
                    />
                    <AvatarFallback>
                      {selectedGroupUser.displayName.charAt(0).toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <p className="font-medium">
                      {selectedGroupUser.displayName}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      {selectedGroupUser.email}
                    </p>
                    <Badge variant="secondary" className="mt-1">
                      C√≥ th·ªÉ th√™m v√†o nh√≥m
                    </Badge>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* New Features Showcase */}
      <Card>
        <CardHeader>
          <CardTitle>‚ú® T√≠nh nƒÉng m·ªõi ƒë∆∞·ª£c th√™m v√†o</CardTitle>
          <CardDescription>
            Danh s√°ch c√°c t√≠nh nƒÉng n√¢ng cao ƒë√£ ƒë∆∞·ª£c implement
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Critical Fixes */}
            <div className="space-y-4">
              <h4 className="font-semibold text-lg text-primary">
                üîß Critical Fixes & Must-Have Features
              </h4>
              <div className="space-y-3">
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Infinite Scroll Pagination</p>
                    <p className="text-sm text-muted-foreground">
                      S·ª≠ d·ª•ng useInfiniteQuery ƒë·ªÉ t·∫£i d·ªØ li·ªáu theo trang khi
                      scroll
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Robust API Error Handling</p>
                    <p className="text-sm text-muted-foreground">
                      X·ª≠ l√Ω l·ªói API v·ªõi th√¥ng b√°o th√¢n thi·ªán v√† n√∫t retry
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Proper Loading States</p>
                    <p className="text-sm text-muted-foreground">
                      Skeleton loader cho tr·∫°ng th√°i loading ban ƒë·∫ßu
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* UX Improvements */}
            <div className="space-y-4">
              <h4 className="font-semibold text-lg text-primary">
                üöÄ UX & Optimization Improvements
              </h4>
              <div className="space-y-3">
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Initial Results on Focus</p>
                    <p className="text-sm text-muted-foreground">
                      T·∫£i danh s√°ch ng∆∞·ªùi d√πng ban ƒë·∫ßu khi m·ªü combobox
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Optimized Search Triggers</p>
                    <p className="text-sm text-muted-foreground">
                      Ch·ªâ t√¨m ki·∫øm khi nh·∫≠p t·ª´ 2 k√Ω t·ª± tr·ªü l√™n
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Defensive Data Handling</p>
                    <p className="text-sm text-muted-foreground">
                      Lo·∫°i b·ªè duplicate v√† ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <Separator className="my-6" />

          {/* Advanced Features */}
          <div className="space-y-4">
            <h4 className="font-semibold text-lg text-primary">
              üéØ Advanced Performance & Accessibility
            </h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-3">
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Scroll-based Infinite Loading</p>
                    <p className="text-sm text-muted-foreground">
                      T·ª± ƒë·ªông t·∫£i trang ti·∫øp theo khi scroll ƒë·∫øn cu·ªëi
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Enhanced Accessibility</p>
                    <p className="text-sm text-muted-foreground">
                      ARIA labels, keyboard navigation, v√† screen reader support
                    </p>
                  </div>
                </div>
              </div>
              <div className="space-y-3">
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Performance Optimizations</p>
                    <p className="text-sm text-muted-foreground">
                      useCallback, useMemo, v√† debounced search ƒë·ªÉ t·ªëi ∆∞u hi·ªáu
                      su·∫•t
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                  <div>
                    <p className="font-medium">Smart State Management</p>
                    <p className="text-sm text-muted-foreground">
                      Qu·∫£n l√Ω state th√¥ng minh v·ªõi retry logic v√† cache
                      management
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Usage Instructions */}
      <Card>
        <CardHeader>
          <CardTitle>C√°ch s·ª≠ d·ª•ng component n√¢ng cao</CardTitle>
          <CardDescription>
            H∆∞·ªõng d·∫´n t√≠ch h·ª£p UserSearchCombobox v·ªõi c√°c t√≠nh nƒÉng m·ªõi
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <h4 className="font-medium mb-2">1. Import component:</h4>
              <pre className="bg-muted p-3 rounded text-sm overflow-x-auto">
                {`import { UserSearchCombobox } from "@/components/features/admin/users/UserSearchCombobox";`}
              </pre>
            </div>

            <div>
              <h4 className="font-medium mb-2">
                2. S·ª≠ d·ª•ng c∆° b·∫£n v·ªõi infinite scroll:
              </h4>
              <pre className="bg-muted p-3 rounded text-sm overflow-x-auto">
                {`const [selectedUser, setSelectedUser] = useState(null);
const [searchQuery, setSearchQuery] = useState("");

<UserSearchCombobox
  value={selectedUser}
  onSelectUser={setSelectedUser}
  searchQuery={searchQuery}
  onSearchQueryChange={setSearchQuery}
  placeholder="T√¨m ki·∫øm ng∆∞·ªùi d√πng..."
/>`}
              </pre>
            </div>

            <div>
              <h4 className="font-medium mb-2">
                3. V·ªõi excludeGroupId v√† error handling:
              </h4>
              <pre className="bg-muted p-3 rounded text-sm overflow-x-auto">
                {`const [selectedUser, setSelectedUser] = useState(null);
const [searchQuery, setSearchQuery] = useState("");

<UserSearchCombobox
  value={selectedUser}
  onSelectUser={setSelectedUser}
  searchQuery={searchQuery}
  onSearchQueryChange={setSearchQuery}
  excludeGroupId="group-id-123"
  placeholder="T√¨m ki·∫øm ng∆∞·ªùi d√πng cho nh√≥m..."
/>`}
              </pre>
            </div>

            <div>
              <h4 className="font-medium mb-2">4. Props available:</h4>
              <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
                <li>
                  <code>value</code>: Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn (controlled)
                </li>
                <li>
                  <code>onSelectUser</code>: Callback khi ch·ªçn ng∆∞·ªùi d√πng
                  (required)
                </li>
                <li>
                  <code>searchQuery</code>: Text t√¨m ki·∫øm hi·ªán t·∫°i (controlled)
                </li>
                <li>
                  <code>onSearchQueryChange</code>: Callback khi text t√¨m ki·∫øm
                  thay ƒë·ªïi (required)
                </li>
                <li>
                  <code>excludeGroupId</code>: ID nh√≥m ƒë·ªÉ lo·∫°i tr·ª´ th√†nh vi√™n
                  hi·ªán t·∫°i (optional)
                </li>
                <li>
                  <code>placeholder</code>: Placeholder text cho input
                  (optional)
                </li>
                <li>
                  <code>className</code>: CSS classes t√πy ch·ªânh (optional)
                </li>
              </ul>
            </div>

            <div>
              <h4 className="font-medium mb-2">5. T√≠nh nƒÉng t·ª± ƒë·ªông:</h4>
              <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
                <li>
                  Infinite scroll pagination khi scroll ƒë·∫øn cu·ªëi danh s√°ch
                </li>
                <li>Error handling v·ªõi retry mechanism</li>
                <li>Skeleton loading cho tr·∫°ng th√°i ban ƒë·∫ßu</li>
                <li>Debounced search (300ms delay)</li>
                <li>Initial results khi m·ªü combobox</li>
                <li>Duplicate removal v√† data validation</li>
                <li>
                  Fully controlled component v·ªõi state management ·ªü parent
                </li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
